CREATE QUERY tg_cycle_component(STRING v_type,STRING e_type,BOOL print_results = TRUE, STRING result_attr =  "", STRING file_path = "") SYNTAX v1{ 
  /* 
  This algorithm is for undirected graph
  Find all vertex which are in a cycle
  
  Parameters:
  v_type: vertex types to traverse
  e_type: edge types to traverse
  print_results: weather print the result
  result_attr: attribute to write result to        file_path: file to write CSV output to
   */
  OrAccum @or_nocycle;
  SumAccum<INT> @sum_outdegree;
  SumAccum<INT> @@sum_stop=1;
  FILE f (file_path);
  Start = {v_type};
  WHILE @@sum_stop!=0 DO
        @@sum_stop=0;
        Start = SELECT s 
                FROM Start:s-(e_type)-v_type:t 
                WHERE t.@or_nocycle==FALSE and s!=t
                ACCUM s.@sum_outdegree+=1
                POST-ACCUM IF s.@sum_outdegree==1 THEN @@sum_stop+=1,s.@or_nocycle+=TRUE END,
                           s.@sum_outdegree=0
                HAVING s.@or_nocycle==FALSE;
        
  END;
  # Output
  IF file_path != "" THEN
      f.println("Vertex_ID_In_cycle");
  END;

  V = SELECT s 
      FROM Start:s
      POST-ACCUM 
          IF result_attr != "" THEN 
              s.setAttr(result_attr, TRUE) 
          END,
   
          IF file_path != "" THEN 
              f.println(s) 
          END;
   
  IF print_results THEN
      PRINT Start;
  END;
  
  PRINT "tg_cycle_component works!"; 
}
