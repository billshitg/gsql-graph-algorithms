CREATE QUERY tg_tri_count_fast(STRING v_type, STRING e_type)  SYNTAX V1 {

# Compute the total number of triangles in the graph
# This algorithm is faster than tri_count but uses additional memory for temporary storage
SumAccum<INT> @@sum_cnt;
SetAccum<VERTEX> @neighbors_set;
//SumAccum<INT> @sum_outdegree;
all = {v_type};

# We build up our neighbor lists manually because we'll only build them up on the 2 smaller vertices on a triangle. 

tmp = SELECT t
      FROM all:s-(e_type)- v_type:t
      WHERE getvid(s) > getvid(t)
      ACCUM t.@neighbors_set += s;

# Here we compute the intersection for 2 points on the triangle.
tmp = SELECT t
      FROM all:s-((e_type))- :t
      WHERE getvid(s) > getvid(t)
      ACCUM @@sum_cnt += COUNT(s.@neighbors_set INTERSECT t.@neighbors_set);
                   
# print result
PRINT @@sum_cnt AS num_triangles;

}
